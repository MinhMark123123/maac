// Mocks generated by Mockito 5.4.4 from annotations
// in maac_mvvm_with_get_it/test/config/test_config.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i8;

import 'package:flutter/material.dart' as _i4;
import 'package:flutter/services.dart' as _i9;
import 'package:maac_mvvm/maac_mvvm.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:visibility_detector/visibility_detector.dart' as _i7;

import 'test_config.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamData_0<T> extends _i1.SmartFake implements _i2.StreamData<T> {
  _FakeStreamData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBuildContext_2 extends _i1.SmartFake implements _i4.BuildContext {
  _FakeBuildContext_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLifeCycleManager_3 extends _i1.SmartFake
    implements _i2.LifeCycleManager {
  _FakeLifeCycleManager_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExampleViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockExampleViewModel extends _i1.Mock implements _i5.ExampleViewModel {
  @override
  _i2.StreamData<int> get uiState => (super.noSuchMethod(
        Invocation.getter(#uiState),
        returnValue: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
        returnValueForMissingStub: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
      ) as _i2.StreamData<int>);

  @override
  bool get isBoundLifeCycle => (super.noSuchMethod(
        Invocation.getter(#isBoundLifeCycle),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void onInitState() => super.noSuchMethod(
        Invocation.method(
          #onInitState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose() => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<G> viewModelScope<G>(
    _i3.Future<G> Function()? future, {
    _i4.Key? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewModelScope,
          [future],
          {#key: key},
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<G>(
                this,
                Invocation.method(
                  #viewModelScope,
                  [future],
                  {#key: key},
                ),
              ),
              (G v) => _i3.Future<G>.value(v),
            ) ??
            _FakeFuture_1<G>(
              this,
              Invocation.method(
                #viewModelScope,
                [future],
                {#key: key},
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<G>(
                this,
                Invocation.method(
                  #viewModelScope,
                  [future],
                  {#key: key},
                ),
              ),
              (G v) => _i3.Future<G>.value(v),
            ) ??
            _FakeFuture_1<G>(
              this,
              Invocation.method(
                #viewModelScope,
                [future],
                {#key: key},
              ),
            ),
      ) as _i3.Future<G>);

  @override
  void cancelByKey(_i4.Key? key) => super.noSuchMethod(
        Invocation.method(
          #cancelByKey,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addComponents(_i2.LifecycleComponent? lifecycleComponent) =>
      super.noSuchMethod(
        Invocation.method(
          #addComponents,
          [lifecycleComponent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void markViewModelHasBondLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #markViewModelHasBondLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume() => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPause() => super.noSuchMethod(
        Invocation.method(
          #onPause,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationResumed() => super.noSuchMethod(
        Invocation.method(
          #onApplicationResumed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationInactive() => super.noSuchMethod(
        Invocation.method(
          #onApplicationInactive,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationPaused() => super.noSuchMethod(
        Invocation.method(
          #onApplicationPaused,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationDetached() => super.noSuchMethod(
        Invocation.method(
          #onApplicationDetached,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationHidden() => super.noSuchMethod(
        Invocation.method(
          #onApplicationHidden,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ExampleSecondViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockExampleSecondViewModel extends _i1.Mock
    implements _i5.ExampleSecondViewModel {
  @override
  _i2.StreamData<int> get uiState => (super.noSuchMethod(
        Invocation.getter(#uiState),
        returnValue: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
        returnValueForMissingStub: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
      ) as _i2.StreamData<int>);

  @override
  bool get isBoundLifeCycle => (super.noSuchMethod(
        Invocation.getter(#isBoundLifeCycle),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void onInitState() => super.noSuchMethod(
        Invocation.method(
          #onInitState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose() => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<G> viewModelScope<G>(
    _i3.Future<G> Function()? future, {
    _i4.Key? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewModelScope,
          [future],
          {#key: key},
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<G>(
                this,
                Invocation.method(
                  #viewModelScope,
                  [future],
                  {#key: key},
                ),
              ),
              (G v) => _i3.Future<G>.value(v),
            ) ??
            _FakeFuture_1<G>(
              this,
              Invocation.method(
                #viewModelScope,
                [future],
                {#key: key},
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<G>(
                this,
                Invocation.method(
                  #viewModelScope,
                  [future],
                  {#key: key},
                ),
              ),
              (G v) => _i3.Future<G>.value(v),
            ) ??
            _FakeFuture_1<G>(
              this,
              Invocation.method(
                #viewModelScope,
                [future],
                {#key: key},
              ),
            ),
      ) as _i3.Future<G>);

  @override
  void cancelByKey(_i4.Key? key) => super.noSuchMethod(
        Invocation.method(
          #cancelByKey,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addComponents(_i2.LifecycleComponent? lifecycleComponent) =>
      super.noSuchMethod(
        Invocation.method(
          #addComponents,
          [lifecycleComponent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void markViewModelHasBondLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #markViewModelHasBondLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume() => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPause() => super.noSuchMethod(
        Invocation.method(
          #onPause,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationResumed() => super.noSuchMethod(
        Invocation.method(
          #onApplicationResumed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationInactive() => super.noSuchMethod(
        Invocation.method(
          #onApplicationInactive,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationPaused() => super.noSuchMethod(
        Invocation.method(
          #onApplicationPaused,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationDetached() => super.noSuchMethod(
        Invocation.method(
          #onApplicationDetached,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationHidden() => super.noSuchMethod(
        Invocation.method(
          #onApplicationHidden,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LifeCycleManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLifeCycleManager extends _i1.Mock implements _i2.LifeCycleManager {
  @override
  List<_i2.LifecycleComponent> get lifecycles => (super.noSuchMethod(
        Invocation.getter(#lifecycles),
        returnValue: <_i2.LifecycleComponent>[],
        returnValueForMissingStub: <_i2.LifecycleComponent>[],
      ) as List<_i2.LifecycleComponent>);

  @override
  void registerWidgetBindLifecycle(String? lifeOwnerKey) => super.noSuchMethod(
        Invocation.method(
          #registerWidgetBindLifecycle,
          [lifeOwnerKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isValidLifeCycleHolder(String? lifeOwnerKey) => (super.noSuchMethod(
        Invocation.method(
          #isValidLifeCycleHolder,
          [lifeOwnerKey],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void initState(String? lifeOwnerKey) => super.noSuchMethod(
        Invocation.method(
          #initState,
          [lifeOwnerKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose(String? lifeOwnerKey) => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [lifeOwnerKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onVisibilityChanged(_i7.VisibilityInfo? info) => super.noSuchMethod(
        Invocation.method(
          #onVisibilityChanged,
          [info],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeAppLifecycleState(_i8.AppLifecycleState? state) =>
      super.noSuchMethod(
        Invocation.method(
          #didChangeAppLifecycleState,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onActive(dynamic Function()? actionOnActive) => super.noSuchMethod(
        Invocation.method(
          #onActive,
          [actionOnActive],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDeActive(dynamic Function()? actionOnDeActive) => super.noSuchMethod(
        Invocation.method(
          #onDeActive,
          [actionOnDeActive],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDidChangeDependencies(
          dynamic Function()? actionOnDidChangeDependencies) =>
      super.noSuchMethod(
        Invocation.method(
          #onDidChangeDependencies,
          [actionOnDidChangeDependencies],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDidUpdate(
          dynamic Function<T extends _i4.Widget>(T)? actionOnDidUpdate) =>
      super.noSuchMethod(
        Invocation.method(
          #onDidUpdate,
          [actionOnDidUpdate],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose(dynamic Function()? actionOnDispose) => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [actionOnDispose],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void widgetActivate(String? lifeOwnerKey) => super.noSuchMethod(
        Invocation.method(
          #widgetActivate,
          [lifeOwnerKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void widgetDeActivate(String? lifeOwnerKey) => super.noSuchMethod(
        Invocation.method(
          #widgetDeActivate,
          [lifeOwnerKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void widgetDidChangeDependencies(String? lifeOwnerKey) => super.noSuchMethod(
        Invocation.method(
          #widgetDidChangeDependencies,
          [lifeOwnerKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void widgetDidUpdateWidget<T extends _i4.Widget>({
    required String? lifeOwnerKey,
    required _i4.Widget? widget,
    required T? oldWidget,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #widgetDidUpdateWidget,
          [],
          {
            #lifeOwnerKey: lifeOwnerKey,
            #widget: widget,
            #oldWidget: oldWidget,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<bool> didPopRoute() => (super.noSuchMethod(
        Invocation.method(
          #didPopRoute,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  bool handleStartBackGesture(_i9.PredictiveBackEvent? backEvent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleStartBackGesture,
          [backEvent],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void handleUpdateBackGestureProgress(_i9.PredictiveBackEvent? backEvent) =>
      super.noSuchMethod(
        Invocation.method(
          #handleUpdateBackGestureProgress,
          [backEvent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleCommitBackGesture() => super.noSuchMethod(
        Invocation.method(
          #handleCommitBackGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleCancelBackGesture() => super.noSuchMethod(
        Invocation.method(
          #handleCancelBackGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<bool> didPushRoute(String? route) => (super.noSuchMethod(
        Invocation.method(
          #didPushRoute,
          [route],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> didPushRouteInformation(
          _i4.RouteInformation? routeInformation) =>
      (super.noSuchMethod(
        Invocation.method(
          #didPushRouteInformation,
          [routeInformation],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void didChangeMetrics() => super.noSuchMethod(
        Invocation.method(
          #didChangeMetrics,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeTextScaleFactor() => super.noSuchMethod(
        Invocation.method(
          #didChangeTextScaleFactor,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangePlatformBrightness() => super.noSuchMethod(
        Invocation.method(
          #didChangePlatformBrightness,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeLocales(List<_i8.Locale>? locales) => super.noSuchMethod(
        Invocation.method(
          #didChangeLocales,
          [locales],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeViewFocus(_i8.ViewFocusEvent? event) => super.noSuchMethod(
        Invocation.method(
          #didChangeViewFocus,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i8.AppExitResponse> didRequestAppExit() => (super.noSuchMethod(
        Invocation.method(
          #didRequestAppExit,
          [],
        ),
        returnValue:
            _i3.Future<_i8.AppExitResponse>.value(_i8.AppExitResponse.exit),
        returnValueForMissingStub:
            _i3.Future<_i8.AppExitResponse>.value(_i8.AppExitResponse.exit),
      ) as _i3.Future<_i8.AppExitResponse>);

  @override
  void didHaveMemoryPressure() => super.noSuchMethod(
        Invocation.method(
          #didHaveMemoryPressure,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeAccessibilityFeatures() => super.noSuchMethod(
        Invocation.method(
          #didChangeAccessibilityFeatures,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AwakeContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockAwakeContext extends _i1.Mock implements _i2.WrapperContext {
  @override
  _i4.BuildContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeBuildContext_2(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeBuildContext_2(
          this,
          Invocation.getter(#context),
        ),
      ) as _i4.BuildContext);

  @override
  _i2.LifeCycleManager get lifeCycleManager => (super.noSuchMethod(
        Invocation.getter(#lifeCycleManager),
        returnValue: _FakeLifeCycleManager_3(
          this,
          Invocation.getter(#lifeCycleManager),
        ),
        returnValueForMissingStub: _FakeLifeCycleManager_3(
          this,
          Invocation.getter(#lifeCycleManager),
        ),
      ) as _i2.LifeCycleManager);
}

/// A class which mocks [StreamDataViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamDataViewModel extends _i1.Mock
    implements _i2.StreamDataViewModel<int> {
  @override
  int get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void postValue(int? data) => super.noSuchMethod(
        Invocation.method(
          #postValue,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setValue(int? data) => super.noSuchMethod(
        Invocation.method(
          #setValue,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Stream<int> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i3.Stream<int>.empty(),
        returnValueForMissingStub: _i3.Stream<int>.empty(),
      ) as _i3.Stream<int>);

  @override
  void onDispose() => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<bool> any(bool Function(int)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Stream<int> asBroadcastStream({
    void Function(_i3.StreamSubscription<int>)? onListen,
    void Function(_i3.StreamSubscription<int>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i3.Stream<int>.empty(),
        returnValueForMissingStub: _i3.Stream<int>.empty(),
      ) as _i3.Stream<int>);

  @override
  _i2.StreamData<R> map<R>({required R Function(int)? mapper}) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [],
          {#mapper: mapper},
        ),
        returnValue: _FakeStreamData_0<R>(
          this,
          Invocation.method(
            #map,
            [],
            {#mapper: mapper},
          ),
        ),
        returnValueForMissingStub: _FakeStreamData_0<R>(
          this,
          Invocation.method(
            #map,
            [],
            {#mapper: mapper},
          ),
        ),
      ) as _i2.StreamData<R>);

  @override
  void onInitState() => super.noSuchMethod(
        Invocation.method(
          #onInitState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume() => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPause() => super.noSuchMethod(
        Invocation.method(
          #onPause,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationResumed() => super.noSuchMethod(
        Invocation.method(
          #onApplicationResumed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationInactive() => super.noSuchMethod(
        Invocation.method(
          #onApplicationInactive,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationPaused() => super.noSuchMethod(
        Invocation.method(
          #onApplicationPaused,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationDetached() => super.noSuchMethod(
        Invocation.method(
          #onApplicationDetached,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationHidden() => super.noSuchMethod(
        Invocation.method(
          #onApplicationHidden,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
