// Mocks generated by Mockito 5.4.4 from annotations
// in maac_mvvm_with_get_it_example/test/src/legacy/mocker.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter/material.dart' as _i5;
import 'package:maac_mvvm_with_get_it/maac_mvvm_with_get_it.dart' as _i2;
import 'package:maac_mvvm_with_get_it_example/main.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamData_0<T> extends _i1.SmartFake implements _i2.StreamData<T> {
  _FakeStreamData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExamplePageViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockExamplePageViewModel extends _i1.Mock
    implements _i4.ExamplePageViewModel {
  @override
  _i2.StreamData<int> get uiState => (super.noSuchMethod(
        Invocation.getter(#uiState),
        returnValue: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
        returnValueForMissingStub: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
      ) as _i2.StreamData<int>);

  @override
  bool get isBoundLifeCycle => (super.noSuchMethod(
        Invocation.getter(#isBoundLifeCycle),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void incrementCounter() => super.noSuchMethod(
        Invocation.method(
          #incrementCounter,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int returnTestValue() => (super.noSuchMethod(
        Invocation.method(
          #returnTestValue,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void onInitState() => super.noSuchMethod(
        Invocation.method(
          #onInitState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose() => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<G> viewModelScope<G>(
    _i3.Future<G> Function()? future, {
    _i5.Key? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewModelScope,
          [future],
          {#key: key},
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<G>(
                this,
                Invocation.method(
                  #viewModelScope,
                  [future],
                  {#key: key},
                ),
              ),
              (G v) => _i3.Future<G>.value(v),
            ) ??
            _FakeFuture_1<G>(
              this,
              Invocation.method(
                #viewModelScope,
                [future],
                {#key: key},
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<G>(
                this,
                Invocation.method(
                  #viewModelScope,
                  [future],
                  {#key: key},
                ),
              ),
              (G v) => _i3.Future<G>.value(v),
            ) ??
            _FakeFuture_1<G>(
              this,
              Invocation.method(
                #viewModelScope,
                [future],
                {#key: key},
              ),
            ),
      ) as _i3.Future<G>);

  @override
  void cancelByKey(_i5.Key? key) => super.noSuchMethod(
        Invocation.method(
          #cancelByKey,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addComponents(_i2.LifecycleComponent? lifecycleComponent) =>
      super.noSuchMethod(
        Invocation.method(
          #addComponents,
          [lifecycleComponent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void markViewModelHasBondLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #markViewModelHasBondLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume() => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPause() => super.noSuchMethod(
        Invocation.method(
          #onPause,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationResumed() => super.noSuchMethod(
        Invocation.method(
          #onApplicationResumed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationInactive() => super.noSuchMethod(
        Invocation.method(
          #onApplicationInactive,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationPaused() => super.noSuchMethod(
        Invocation.method(
          #onApplicationPaused,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationDetached() => super.noSuchMethod(
        Invocation.method(
          #onApplicationDetached,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationHidden() => super.noSuchMethod(
        Invocation.method(
          #onApplicationHidden,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ExampleAPageViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockExampleAPageViewModel extends _i1.Mock
    implements _i4.ExampleAPageViewModel {
  @override
  _i2.StreamData<int> get uiState => (super.noSuchMethod(
        Invocation.getter(#uiState),
        returnValue: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
        returnValueForMissingStub: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
      ) as _i2.StreamData<int>);

  @override
  _i2.StreamData<String> get uiStateMap => (super.noSuchMethod(
        Invocation.getter(#uiStateMap),
        returnValue: _FakeStreamData_0<String>(
          this,
          Invocation.getter(#uiStateMap),
        ),
        returnValueForMissingStub: _FakeStreamData_0<String>(
          this,
          Invocation.getter(#uiStateMap),
        ),
      ) as _i2.StreamData<String>);

  @override
  bool get isBoundLifeCycle => (super.noSuchMethod(
        Invocation.getter(#isBoundLifeCycle),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void incrementCounter() => super.noSuchMethod(
        Invocation.method(
          #incrementCounter,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onInitState() => super.noSuchMethod(
        Invocation.method(
          #onInitState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose() => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<G> viewModelScope<G>(
    _i3.Future<G> Function()? future, {
    _i5.Key? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewModelScope,
          [future],
          {#key: key},
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<G>(
                this,
                Invocation.method(
                  #viewModelScope,
                  [future],
                  {#key: key},
                ),
              ),
              (G v) => _i3.Future<G>.value(v),
            ) ??
            _FakeFuture_1<G>(
              this,
              Invocation.method(
                #viewModelScope,
                [future],
                {#key: key},
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<G>(
                this,
                Invocation.method(
                  #viewModelScope,
                  [future],
                  {#key: key},
                ),
              ),
              (G v) => _i3.Future<G>.value(v),
            ) ??
            _FakeFuture_1<G>(
              this,
              Invocation.method(
                #viewModelScope,
                [future],
                {#key: key},
              ),
            ),
      ) as _i3.Future<G>);

  @override
  void cancelByKey(_i5.Key? key) => super.noSuchMethod(
        Invocation.method(
          #cancelByKey,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addComponents(_i2.LifecycleComponent? lifecycleComponent) =>
      super.noSuchMethod(
        Invocation.method(
          #addComponents,
          [lifecycleComponent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void markViewModelHasBondLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #markViewModelHasBondLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume() => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPause() => super.noSuchMethod(
        Invocation.method(
          #onPause,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationResumed() => super.noSuchMethod(
        Invocation.method(
          #onApplicationResumed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationInactive() => super.noSuchMethod(
        Invocation.method(
          #onApplicationInactive,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationPaused() => super.noSuchMethod(
        Invocation.method(
          #onApplicationPaused,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationDetached() => super.noSuchMethod(
        Invocation.method(
          #onApplicationDetached,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationHidden() => super.noSuchMethod(
        Invocation.method(
          #onApplicationHidden,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ExampleBPageViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockExampleBPageViewModel extends _i1.Mock
    implements _i4.ExampleBPageViewModel {
  @override
  _i2.StreamData<int> get uiState => (super.noSuchMethod(
        Invocation.getter(#uiState),
        returnValue: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
        returnValueForMissingStub: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
      ) as _i2.StreamData<int>);

  @override
  _i2.StreamData<String> get dataApi => (super.noSuchMethod(
        Invocation.getter(#dataApi),
        returnValue: _FakeStreamData_0<String>(
          this,
          Invocation.getter(#dataApi),
        ),
        returnValueForMissingStub: _FakeStreamData_0<String>(
          this,
          Invocation.getter(#dataApi),
        ),
      ) as _i2.StreamData<String>);

  @override
  bool get isBoundLifeCycle => (super.noSuchMethod(
        Invocation.getter(#isBoundLifeCycle),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void onInitState() => super.noSuchMethod(
        Invocation.method(
          #onInitState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void incrementCounter() => super.noSuchMethod(
        Invocation.method(
          #incrementCounter,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose() => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<G> viewModelScope<G>(
    _i3.Future<G> Function()? future, {
    _i5.Key? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewModelScope,
          [future],
          {#key: key},
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<G>(
                this,
                Invocation.method(
                  #viewModelScope,
                  [future],
                  {#key: key},
                ),
              ),
              (G v) => _i3.Future<G>.value(v),
            ) ??
            _FakeFuture_1<G>(
              this,
              Invocation.method(
                #viewModelScope,
                [future],
                {#key: key},
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<G>(
                this,
                Invocation.method(
                  #viewModelScope,
                  [future],
                  {#key: key},
                ),
              ),
              (G v) => _i3.Future<G>.value(v),
            ) ??
            _FakeFuture_1<G>(
              this,
              Invocation.method(
                #viewModelScope,
                [future],
                {#key: key},
              ),
            ),
      ) as _i3.Future<G>);

  @override
  void cancelByKey(_i5.Key? key) => super.noSuchMethod(
        Invocation.method(
          #cancelByKey,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addComponents(_i2.LifecycleComponent? lifecycleComponent) =>
      super.noSuchMethod(
        Invocation.method(
          #addComponents,
          [lifecycleComponent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void markViewModelHasBondLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #markViewModelHasBondLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume() => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPause() => super.noSuchMethod(
        Invocation.method(
          #onPause,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationResumed() => super.noSuchMethod(
        Invocation.method(
          #onApplicationResumed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationInactive() => super.noSuchMethod(
        Invocation.method(
          #onApplicationInactive,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationPaused() => super.noSuchMethod(
        Invocation.method(
          #onApplicationPaused,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationDetached() => super.noSuchMethod(
        Invocation.method(
          #onApplicationDetached,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onApplicationHidden() => super.noSuchMethod(
        Invocation.method(
          #onApplicationHidden,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
