// Mocks generated by Mockito 5.4.0 from annotations
// in example/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:example/main.dart' as _i4;
import 'package:flutter/material.dart' as _i5;
import 'package:maac_mvvm_with_get_it/maac_mvvm_with_get_it.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamData_0<T> extends _i1.SmartFake implements _i2.StreamData<T> {
  _FakeStreamData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExamplePageViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockExamplePageViewModel extends _i1.Mock
    implements _i4.ExamplePageViewModel {
  @override
  _i2.StreamData<int> get uiState => (super.noSuchMethod(
        Invocation.getter(#uiState),
        returnValue: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
        returnValueForMissingStub: _FakeStreamData_0<int>(
          this,
          Invocation.getter(#uiState),
        ),
      ) as _i2.StreamData<int>);
  @override
  bool get isBoundLifeCycle => (super.noSuchMethod(
        Invocation.getter(#isBoundLifeCycle),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void incrementCounter() => super.noSuchMethod(
        Invocation.method(
          #incrementCounter,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  int returnTestValue() => (super.noSuchMethod(
        Invocation.method(
          #returnTestValue,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void onInitState() => super.noSuchMethod(
        Invocation.method(
          #onInitState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDispose() => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<G> viewModelScope<G>(
    _i3.Future<G> Function()? future, {
    _i5.Key? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewModelScope,
          [future],
          {#key: key},
        ),
        returnValue: _FakeFuture_1<G>(
          this,
          Invocation.method(
            #viewModelScope,
            [future],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeFuture_1<G>(
          this,
          Invocation.method(
            #viewModelScope,
            [future],
            {#key: key},
          ),
        ),
      ) as _i3.Future<G>);
  @override
  void addStreamData(_i2.StreamDataViewModel<dynamic>? streamDataViewModel) =>
      super.noSuchMethod(
        Invocation.method(
          #addStreamData,
          [streamDataViewModel],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void markViewModelHasBondLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #markViewModelHasBondLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onResume() => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onPause() => super.noSuchMethod(
        Invocation.method(
          #onPause,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onApplicationResumed() => super.noSuchMethod(
        Invocation.method(
          #onApplicationResumed,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onApplicationInactive() => super.noSuchMethod(
        Invocation.method(
          #onApplicationInactive,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onApplicationPaused() => super.noSuchMethod(
        Invocation.method(
          #onApplicationPaused,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onApplicationDetached() => super.noSuchMethod(
        Invocation.method(
          #onApplicationDetached,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StreamDataViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamDataViewModel extends _i1.Mock
    implements _i2.StreamDataViewModel<int> {
  @override
  int get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void postValue(int? data) => super.noSuchMethod(
        Invocation.method(
          #postValue,
          [data],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setValue(int? data) => super.noSuchMethod(
        Invocation.method(
          #setValue,
          [data],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Stream<int> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i3.Stream<int>.empty(),
        returnValueForMissingStub: _i3.Stream<int>.empty(),
      ) as _i3.Stream<int>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
